Rogoz Claudia 321CA
Tema1- Protocoale de Comunicatie
Implementare protocol PAR


Aceasta tema a presupus implementarea unui protocol PAR ( Positive Acknowledgement with Retransmission Protocol).

***Detalii de implementare***

Pentru implementarea acestui protocol am folosit 2 fisiere:

	*send.c --> contine implementarea emitatorului
		Emitatorul va contine un numar de secventa curenta pentru a sti ce cadru sa transmita mai departe receptorului. Pentru implementare m-am ajutat de o structura auxiliara frame care contine pe langa campurile len ( lungimea cadrului) , payload (datele efective) , continute si in cadrul structurii msg din "lib.h", si campurile seq (secventa cadrului) si checksum(suma de control).
		In "send.c", m-am folosit de functiile:
			-"get_bit" care primeste ca parametrii un caracter si un int si va intoarce bitul de pe pozitia i in reprezentarea binara a char-ului.
			-"char_to_binary" care primeste ca parametrii un char si intoarce reprezentarea sa binara sub forma de string
			-"generate_random" care va returna un numar intre 1 si MAX_SIZE ( = 60 )
		In cadrul functiei main, datele sunt citite din fisierul "date.in", iar informatiile cu privire la algoritmul utilizat sunt scrise in fisierul "log.txt".
		O variabila importanta in implementarea acestui protocol este "next_frame_to_send" - variabila care reprezinta numarul de secventa al cadrului care va urma sa fie trimis.
		Cat timp in urma citirii din fisier se obtin date, algoritmul se aplica astfel:
			Se scrie secventa corespunzatoare in payload, se scriu datele (cu o lungime generata aleator intre 0 si 60), urmand apoi checksum-ul care este calculat prin intermediul operatiei xor intre toti octetii prezenti in cadru (0 - numarul_de_octeti_cititi_din_fisier + 1). 
			Dupa trimiterea cadrului, se asteapta un numar de milisecunde pana cand se primeste raspunsul de la receptor. Daca in acest interval de timp nu se primeste niciun raspuns, cadrul va fi retransmis, iar algoritmul se repeta. Aceeasi situatie se intalneste si in cazul in care checksum-ul nu este corect, sau daca secventa transmisa de receptor nu corespunde cu secventa trimisa de emitator la momentul respectiv. Daca din contra, se satisfac toate conditiile, se trece la transmiterea cadrului urmator prin incrementarea variabilei "next_frame".
	
	*recv.c --> contine implementarea receptorului
		Receptorul contine asemenea emitatorului structura frame, dar care , ca implementare va fi similara cu msg din "lib.h". Aceasta va contine numai campurile len si payload.
		Functiile "get_bit", respectiv "char_to_binary" au aceeasi implementare si functionalitate ca si cele 2 functii de sender.c.
		In momentul in care se primeste un mesaj de la emitator, receiver-ul verifica integritatea mesajului in mod similar generarii checksum-ului din sender.
		Totodata in implementare m-am folosit de functiile complementare setjmp si longjmp din cadrul headerului "setjmp.h". In acest fel am obtinut pentru cadrele care indeplinesc conditia frame_expected%6 == 0 (6, 12, 18, ...) timeout. Asadar, ma folosesc de setjmp pentru salvarea contextului programului (starii programului) pentru fiecare asa zisa "iteratie" din bucla while in cadrul structuriispecifice "jmp_buf". Acesta structura va fi solosita ulterior de longjmp pentru revenirea la
        starea anterioara a programului. Asadar, salvarea contextului se face inainte de fiecare primire de cadru (recv_message), iar daca numarul secventei care se asteapta este un multiplu de 6, se apeleaza longjmp. In acest moment, se revine la starea anterioara a programului, asadar inainte de recv_message. Cum insa recv_message nu va primi nimic, in sender se detecteaza timeout-ul. 
		Mesajele trimise de receiver spre sender sunt de forma seq + checksum ( = seq). In momentul in care apare un checksum invalid, receiver-ul va trimite confirmarea pentru ultimul cadru primit corect.
		
***Nota*** 
	
	Pentru testul de intrare am generat un text Lorem ipsum de 5 paragrafe, 461 cuvinte si 3156 bytes.
	Pentru timeout, m-am folosit de functia receive_message_timeout. Ca parametru i-am dat 25ms. In acest interval de timp, transferul se face optim fara producerea de time-out-uri nedorite .In acest interval de timp se socotesc atat intarzierile ce survin in urma transferului (dat in script-ul ./run_experiment DELAY = 1, in acest caz) dar si de timpul necesar prelucrarii datelor. Astfel am socotit intervalul de timp ca fiind dublul intazierilor de transfer al datelor (atat transmiterea
    emitor-receptor, cat si transmiterea receptor- emitor) adunat la un timp de prelucrare gasit ca fiind approx 25ms.
	Pentru coruperea pachetelor, am utilizat un procent de 30%. In aceste conditii timpul real de prelucrare a textului generat este in medie de 8.283 secunde. Acest timp a fost generat prin folosirea comenzii unix-> time adaugate apelului executabilului "./send".
	Pentru intarzierea pachetelor m-am folosit de cele 2 functii setjmp si longjmp din header-ul "setjmp" care asa cum am explicat mai devreme vor intarzia doar cadrele pentru care secventa astepta este multiplu de 6.
